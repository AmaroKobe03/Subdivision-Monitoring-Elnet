@{
    ViewData["Title"] = "Facility Management";
}

@model List<dynamic>
@{
    var reservations = ViewBag.Reservations as List<dynamic>;
}

<div class="flex h-[100vh] w-[90%] flex-col items-center overflow-auto overflow-y-hidden bg-[#f2f2f2] font-semibold">
    @await Html.PartialAsync("_sharedSearch")

    <div class="flex h-[15vh] w-[92%] items-center justify-center">
        <div class="flex h-[15vh] w-full items-center justify-center gap-6">

            @foreach (var item in reservations)
            {
                <div class="flex h-[15vh] w-[23%] items-center justify-around rounded-lg bg-white shadow-lg @item.BorderColor">
                    <div class="ml-5 flex flex-col gap-2">
                        <h2 class="text-[16px] text-gray-400">@item.Title</h2>
                        <p class="text-2xl">@item.Count</p>
                    </div>
                    <img class="w-[30px]" src="@Url.Content(item.Icon)" alt="status-icon" />
                </div>
            }

        </div>
    </div>
    <div class="mt-10 mr-2 mb-6 flex w-[88.3%] items-center justify-between">
        <!-- Search Bar -->
        <div class="relative mr-2 w-[40%]">
            <input type="text" placeholder="Search"
                   class="h-12 w-full rounded-full border border-gray-300 bg-white pr-4 pl-12 outline-none focus:ring-2 focus:ring-gray-300">
            <img class="absolute top-1/2 left-4 h-5 -translate-y-1/2" src="~/Images/find.svg" alt="Search">
        </div>

        <!-- Filter Icon with Text -->
        <div class="relative right-80 flex cursor-pointer items-center gap-2">
            <img src="~/Images/filter.svg" alt="Filter" class="h-5">
            <span class="font-medium text-black">Filters</span>
        </div>

        <!-- Add Facility Button -->
        <button class="flex items-center gap-2 rounded-full bg-[#04373A] px-6 py-2 text-white">
            <span class="text-xl">+</span>
            <span class="font-medium">Add Facility</span>
        </button>
    </div>

    <div id="sort" class="flex w-[88.5%] flex-row items-center gap-6">
        <a href="#" class="cursor-pointer rounded-full bg-blue-200 px-6 py-2 text-center font-semibold text-blue-700">
            <span class="text-[15px]">All Facilities</span>
        </a>
        <a href="#" class="cursor-pointer rounded-full bg-gray-100 px-6 py-2 text-center hover:bg-gray-200">
            <span class="text-[15px] text-black">Sports</span>
        </a>
        <a href="#" class="cursor-pointer rounded-full bg-gray-100 px-6 py-2 text-center hover:bg-gray-200">
            <span class="text-[15px] text-black">Events</span>
        </a>
        <a href="#" class="cursor-pointer rounded-full bg-gray-100 px-6 py-2 text-center hover:bg-gray-200">
            <span class="text-[15px] text-black">Recreation</span>
        </a>
    </div>

    <!-- Facility Cards -->
    <div class="mt-6 flex w-[88.5%] grid-cols-3 items-center justify-center gap-6 overflow-y-auto">
        @foreach (var facility in Model)
        {
            <div class="w-[88.5%] rounded-lg bg-white shadow-lg">
                <!-- Image Section -->
                <div class="relative w-full">
                    <img class="h-[200px] w-full rounded-t-lg object-cover" src="@Url.Content(facility.Image)" alt="@facility.Name">
                    <span class="absolute top-2 right-2 z-10 rounded-full px-3 py-1 text-sm font-semibold text-white shadow-md @(facility.Available ? "bg-green-500" : "bg-red-500")">
                        @(facility.Available ? "Available" : "Unavailable")
                    </span>
                </div>

                <!-- Title and Toggle -->
                <div class="mt-4 flex items-center justify-between px-4">
                    <h1 class="text-lg font-semibold">
                        @facility.Name
                    </h1>
                    <label class="relative inline-flex cursor-pointer items-center">
                        <input type="checkbox" class="toggleSwitch sr-only">
                        <div class="relative h-6 w-11 rounded-full bg-gray-300 transition-colors duration-300 ease-in-out">
                            <div class="absolute top-1 left-1 h-4 w-4 rounded-full bg-white transition-all duration-300 ease-in-out"></div>
                        </div>
                    </label>

                </div>

                <!-- Type & Rating -->
                <p class="px-4 text-sm text-gray-500">@facility.Type</p>
                <div class="flex items-center gap-2 px-4 text-gray-700">
                    <img src="~/Images/star.svg" class="h-4 w-4" />
                    <p class="text-sm font-medium">@facility.Rating</p>
                </div>

                <!-- Time & Price -->
                <div class="mt-2 flex items-center gap-4 px-4 text-gray-700">
                    <div class="flex items-center gap-2">
                        <img src="~/Images/timeic.svg" class="h-4 w-4" />
                        <p class="text-sm">@facility.Time</p>
                    </div>
                    <div class="flex items-center gap-2">
                        <img src="~/Images/dollar.svg" class="h-4 w-4" />
                        <p class="text-sm">@facility.Price</p>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="mt-4 mb-4 flex items-center justify-between gap-4 px-4">
                    <button type="button" class="w-full rounded-full bg-[#043137] px-3 py-1 font-semibold text-white hover:bg-opacity-75">
                        View Details
                    </button>
                    <div class="flex gap-1">
                        <img src="~/Images/edit.svg" class="h-8 w-8 cursor-pointer" />
                        <img src="~/Images/trash.svg" class="h-8 w-8 cursor-pointer" />
                    </div>
                </div>
            </div>
        }

    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".toggleSwitch").forEach(function (toggle) {
                toggle.addEventListener("change", function () {
                    let slider = this.nextElementSibling; // The outer toggle background
                    let circle = slider.querySelector("div"); // The moving circle

                    if (this.checked) {
                        slider.classList.remove("bg-gray-300");
                        slider.classList.add("bg-green-500");
                        circle.classList.add("translate-x-5");
                    } else {
                        slider.classList.remove("bg-green-500");
                        slider.classList.add("bg-gray-300");
                        circle.classList.remove("translate-x-5");
                    }
                });
            });
        });
    </script>


</div>


<script>
    document.querySelectorAll("#sort a").forEach((btn) => {
        btn.addEventListener("click", (e) => {
            e.preventDefault(); // Prevent page reload

            // Reset all buttons
            document.querySelectorAll("#sort a").forEach(b => {
                b.classList.remove("bg-blue-200", "text-blue-700", "font-semibold");
                b.classList.add("bg-gray-100", "hover:bg-gray-200");
                b.querySelector("span").classList.remove("text-blue-700");
                b.querySelector("span").classList.add("text-black");
            });

            // Add active state to the clicked button
            e.currentTarget.classList.add("bg-blue-200", "text-blue-700", "font-semibold");
            e.currentTarget.classList.remove("bg-gray-100", "hover:bg-gray-200");

            // Change the text inside span to blue
            e.currentTarget.querySelector("span").classList.remove("text-black");
            e.currentTarget.querySelector("span").classList.add("text-blue-700");
        });
    });

</script>
