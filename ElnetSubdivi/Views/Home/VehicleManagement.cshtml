@model ElnetSubdivi.Models.VehicleViewModel
@{
    ViewData["Title"] = "Vehicle Management";
    var vehicles = Model.Vehicle;
    var user = Model.User;
    var users = Model.Users;
}
@* @model IEnumerable<dynamic> *@

<div class="flex h-[100vh] w-[90%] flex-col items-center overflow-auto overflow-y-hidden bg-[#f2f2f2] font-semibold">
    @await Html.PartialAsync("_sharedSearch")

    <div class="flex h-[15vh] w-[88%] items-center justify-center">
    @*
        <div class="flex h-[15vh] w-full items-center justify-center gap-6">
            @foreach (var item in Model)
            {
                <div class="flex h-[15vh] w-[25%] items-center justify-around rounded-lg border-b-[3px] bg-white @item.BorderColor shadow-lg">
                    <div class="ml-5 flex flex-col gap-2">
                        <h2 class="text-[16px] text-gray-400">@item.Title</h2>
                        <p class="text-2xl">@item.Count</p>
                    </div>
                    <img class="w-[30px]" src="~/Images/@item.Icon" alt="status-icon" />
                </div>
            }
        </div>
    *@
    </div>

    <div class="mt-10 mr-2 mb-6 flex w-[88%] items-center justify-between">
        <!-- Search Bar -->
        <div class="relative mr-2 w-[40%]">
            <input type="text" placeholder="Search"
                   class="h-12 w-full rounded-full border border-gray-300 bg-white pr-4 pl-12 outline-none focus:ring-2 focus:ring-gray-300">
            <img class="absolute top-1/2 left-4 h-5 -translate-y-1/2" src="~/Images/find.svg" alt="Search">
        </div>

        <!-- Status Dropdown -->
        <div class="relative right-80 inline-block">
            <select id="statusSelect" class="appearance-none rounded-full border border-gray-300 bg-white px-4 py-2 pr-8 font-medium text-black shadow-sm outline-none">
                <option value="All Status">All Status</option>
                <option value="Pending">Approved</option>
                <option value="Approved">Pending</option>
                <option value="Cancelled">Declined</option>
            </select>
            <img src="~/Images/drp.svg" alt="Dropdown" class="pointer-events-none absolute top-1/2 right-3 h-4 -translate-y-1/2">
        </div>


        <div class="flex items-center gap-4">
            <!-- Export Report Button -->
            <button class="flex items-center gap-2 rounded-full border border-[#04373A] bg-white px-6 py-2 text-[#04373A]">
                <img src="~/Images/export.svg" alt="Export" class="h-4">
                <span class="font-medium">Export</span>
            </button>
        </div>
    </div>
    <table class="w-[88%] border-collapse bg-white text-left">
        <thead>
            <tr class="text-gray-500">
                <th class="px-4 py-3">Type</th>
                <th class="px-4 py-3">Brand</th>
                <th class="px-4 py-3">Model</th>
                <th class="px-4 py-3">Color</th>
                <th class="px-4 py-3">Plate Number</th>
                <th class="px-4 py-3">Owner</th>
                <th class="px-4 py-3">Status</th>
                <th class="px-4 py-3">Actions</th>
            </tr>
        </thead>
        <tbody>
                @foreach (var v in Model.Vehicle)
                {
                    var owner = Model.Users.FirstOrDefault(u => u.user_id == v.user_id);
                    string base64Doc = v.vehicle_document != null ? Convert.ToBase64String(v.vehicle_document) : "";
                    string mimeType = "image/jpeg"; // You can set this to a default, or infer from elsewhere if available
                    string dataUrl = $"data:{mimeType};base64,{base64Doc}";

                    <tr>
                        <td class="px-4 py-3">
                            <img src="~/Images/@(v.vehicle_type.ToLower().Contains("motor") ? "motor.svg" : "car.svg")" alt="Vehicle" />
                        </td>
                        <td class="px-4 py-3">@v.vehicle_brand</td>
                        <td class="px-4 py-3">@v.vehicle_model</td>
                        <td class="px-4 py-3">@v.vehicel_color</td>
                        <td class="px-4 py-3">@v.plate_number</td>
                        <td class="px-4 py-3">@owner.first_name @owner.last_name</td>
                        <td class="px-4 py-3 @(v.vehicle_status == "Approved" ? "text-green-500" : v.vehicle_status == "Declined" ? "text-red-500" : "")">
                            @v.vehicle_status
                        </td>
                        <td class="cursor-pointer px-4 py-3 font-semibold text-teal-700 relative">
                            <button class="Vactions-btn">⋮</button>
                            <div class="Vactions-menu absolute right-0 mt-1 hidden w-40 bg-white shadow-md z-50">
                                <ul>
                                    <li class="viewVehiclebtn cursor-pointer px-4 py-2 hover:bg-gray-100"
                                        data-plate="@v.plate_number"
                                        data-type="@v.vehicle_type"
                                        data-brand="@v.vehicle_brand"
                                        data-model="@v.vehicle_model"
                                        data-color="@v.vehicel_color"
                                        data-owner="@owner.first_name @owner.last_name"
                                        data-document="@dataUrl">
                                        View Details
                                    </li>
                                    <li id="approve-btn" class="cursor-pointer px-4 py-2 hover:bg-gray-100">Approve</li>
                                    <li id="decline-btn" class="cursor-not-allowed px-4 py-2 text-red-400">Decline</li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
        </tbody>
    </table>

    <!-- Modal (Hidden by default) -->
    <div id="Vmodal" class="fixed inset-0 z-20 flex hidden items-center justify-center bg-black/50" onclick="closeModal(event)">
        <div id="VmodalContent" class="w-[500px] rounded-2xl bg-white p-8 shadow-lg" onclick="event.stopPropagation()">
            <!-- Modal Header -->
            <h2 class="text-center text-2xl font-bold text-[#003D38]">Vehicle Details</h2>

            <!-- Vehicle Details -->
            <div class="mt-4 grid grid-cols-2 gap-4">
                <div>
                    <label class="text-gray-600">Type</label>
                    <input id="modalType" name="vehicle_type" type="text" value="Car" class="w-full rounded-md border border-gray-300 px-3 py-2 font-semibold text-gray-400" readonly />
                </div>
                <div>
                    <label class="text-gray-600">Model</label>
                    <input id="modalModel" name="vehicle_model" type="text" value="RAV4" class="w-full rounded-md border border-gray-300 px-3 py-2 font-semibold text-gray-400" readonly />
                </div>
                <div>
                    <label class="text-gray-600">Brand</label>
                    <input id="modalBrand" name="vehicle_brand" type="text" value="Toyota" class="w-full rounded-md border border-gray-300 px-3 py-2 font-semibold text-gray-400" readonly />
                </div>
                <div>
                    <label class="text-gray-600">Color</label>
                    <input id="modalColor" name="vehicel_color" type="text" value="Black" class="w-full rounded-md border border-gray-300 px-3 py-2 font-semibold text-gray-400" readonly />
                </div>
            </div>

            <!-- Plate Number & Color in One Row -->
            <div class="mt-4 flex gap-4">
                <div class="w-1/2">
                    <label class="text-gray-600">Plate Number</label>
                    <input id="modalPlate" name="plate_number" type="text" value="2025-03-15" class="w-full rounded-md border border-gray-300 px-3 py-2 text-gray-400" readonly />
                </div>
                <div>
                    <label class="text-gray-600">Owner</label>
                    <input id="modalOwner" name="vehicle_owner" type="text" value="Casy" class="w-full rounded-md border border-gray-300 px-3 py-2 font-semibold text-gray-400" readonly />
                </div>
            </div>

            <!-- OR CR -->
            <div class="mt-4">
                <label class="text-gray-600">Document</label>
                <div id="documentPreview" class="mt-2"></div>
            </div>

            <!-- Buttons -->
            <div class="mt-6 flex gap-4">
                <button class="w-1/2 rounded-full border border-[#B25828] py-2 font-bold text-[#B25828] transition hover:bg-[#B25828] hover:text-white">Decline</button>
                <button class="w-1/2 rounded-full bg-[#003D38] py-2 font-bold text-white transition hover:bg-[#002C2A]">Approve</button>
            </div>
        </div>
    </div>



    @await Html.PartialAsync("_pagination")


    <div id="popup" class="fixed inset-0 z-20 mt-20 flex hidden items-center justify-center bg-gray-100">
        <div id="content" class="flex h-[90vh] w-[90%] rounded-lg bg-white shadow-lg">
        </div>
    </div>

    <script>
        // View Details: Read-only modal
        document.querySelectorAll(".viewVehiclebtn").forEach(btn => {
            btn.addEventListener("click", function () {
                const modal = document.getElementById("Vmodal");
                modal.classList.remove("hidden");

                document.getElementById("modalPlate").value = this.dataset.plate;
                document.getElementById("modalType").value = this.dataset.type;
                document.getElementById("modalBrand").value = this.dataset.brand;
                document.getElementById("modalModel").value = this.dataset.model;
                document.getElementById("modalColor").value = this.dataset.color;
                document.getElementById("modalOwner").value = this.dataset.owner;

                const documentPreview = document.getElementById("documentPreview");
                const documentData = this.dataset.document;
                documentPreview.innerHTML = documentData.includes("image/")
                    ? `<img src="${documentData}" alt="Vehicle Document" class="max-w-full h-auto rounded-md border" />`
                    : `<p class="text-red-500">Unsupported or missing file format.</p>`;

                document.getElementById("modalDocFileInput").disabled = true;
                document.getElementById("modalDocFileInput").value = "";

                // Make all inputs read-only
                ["modalType", "modalBrand", "modalModel", "modalColor"].forEach(id => {
                    document.getElementById(id).readOnly = true;
                });

                // Hide buttons
                document.getElementById("cancelEditBtn").style.display = "none";
                document.querySelector("#editVehicleForm button[type=submit]").style.display = "none";
            });
        });
    </script>


    <script>
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".Vactions-btn").forEach(button => {
                button.addEventListener("click", (event) => {
                    event.stopPropagation();
                    let menu = button.nextElementSibling;
                    document.querySelectorAll(".Vactions-menu").forEach(m => {
                        if (m !== menu) m.classList.add("hidden");
                    });
                    menu.classList.toggle("hidden");
                });
            });

            document.addEventListener("click", () => {
                document.querySelectorAll(".Vactions-menu").forEach(menu => {
                    menu.classList.add("hidden");
                });
            });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const openModal = document.getElementById("openModal");
            const closeModal = document.getElementById("closeModal");
            const modal = document.getElementById("invoiceModal");
            const modalContent = document.getElementById("modalContent");

            openModal.addEventListener("click", function () {
                modal.classList.remove("hidden");
            });

            closeModal.addEventListener("click", function () {
                modal.classList.add("hidden");
            });

            // Close modal when clicking outside modal content
            modal.addEventListener("click", function (event) {
                if (!modalContent.contains(event.target)) {
                    modal.classList.add("hidden");
                }
            });
        });
    </script>


    <script>
        document.querySelectorAll("#sortV a").forEach((btn) => {
            btn.addEventListener("click", (e) => {
                e.preventDefault(); // Prevent page reload

                // Reset all buttons
                document.querySelectorAll("#sortV a").forEach(b => {
                    b.classList.remove("bg-blue-200", "text-blue-700", "font-semibold");
                    b.classList.add("bg-gray-100", "hover:bg-gray-200");
                    b.querySelector("span").classList.remove("text-blue-700");
                    b.querySelector("span").classList.add("text-black");
                });

                // Add active state to the clicked button
                e.currentTarget.classList.add("bg-blue-200", "text-blue-700", "font-semibold");
                e.currentTarget.classList.remove("bg-gray-100", "hover:bg-gray-200");

                // Change the text inside span to blue
                e.currentTarget.querySelector("span").classList.remove("text-black");
                e.currentTarget.querySelector("span").classList.add("text-blue-700");
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const modal = document.getElementById("Vmodal");
            const modalContent = document.getElementById("VmodalContent");

            modal.addEventListener("click", function (event) {
                // If the clicked target is the modal backdrop (not the content), close the modal
                if (!modalContent.contains(event.target)) {
                    modal.classList.add("hidden");
                }
            });
        });
    </script>
    <script>
                document.querySelectorAll("#Vmodal button").forEach(btn => {
            btn.addEventListener("click", function () {
                const status = this.textContent.trim(); // "Approve" or "Decline"
                const plateNumber = document.getElementById("modalPlate").value;

                fetch('/Home/UpdateStatusByPlate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ plateNumber: plateNumber, status: status })
                })
                .then(response => {
                    if (!response.ok) throw new Error("Failed to update.");
                    return response.json();
                })
                .then(data => {
                    alert(`Vehicle status updated to ${data.newStatus}`);
                    location.reload();
                })
                .catch(error => {
                    console.error(error);
                    alert("An error occurred while updating status.");
                });
            });
        });

    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".Vactions-menu").forEach(menu => {
                const approveBtn = menu.querySelector("#approve-btn");
                const declineBtn = menu.querySelector("#decline-btn");

                const updateStatus = (status, menuElement) => {
                    const row = menuElement.closest("tr");
                    const plateNumber = row.querySelector("td:nth-child(5)").textContent.trim(); // 5th column = plate number

                    fetch('/Home/UpdateStatusByPlate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ plateNumber, status })
                    })
                    .then(response => {
                        if (!response.ok) throw new Error("Failed to update status.");
                        return response.json();
                    })
                    .then(data => {
                        alert(`Vehicle status updated to ${data.newStatus}`);
                        location.reload();
                    })
                    .catch(error => {
                        console.error(error);
                        alert("An error occurred while updating status.");
                    });
                };

                if (approveBtn) {
                    approveBtn.addEventListener("click", function (e) {
                        e.stopPropagation();
                        updateStatus("Approved", this);
                    });
                }

                if (declineBtn) {
                    declineBtn.addEventListener("click", function (e) {
                        e.stopPropagation();
                        updateStatus("Declined", this);
                    });
                }
            });
        });
    </script>

</div>