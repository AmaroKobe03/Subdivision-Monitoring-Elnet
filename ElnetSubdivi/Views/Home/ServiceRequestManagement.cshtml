@{
    ViewData["Title"] = "Service Requests Management";
}
@model ElnetSubdivi.Models.ServiceRequestManagementViewModel


<div class="flex h-[100vh] w-[90%] flex-col items-center overflow-auto overflow-y-hidden bg-[#f2f2f2] font-semibold">
    @await Html.PartialAsync("_sharedSearch")

    <div class="mt-10 mr-2 mb-6 flex w-[88.3%] items-center justify-between">
        <!-- Search Bar -->
        <div class="relative mr-2 w-[40%]">
            <input type="text" placeholder="Search"
                   class="h-12 w-full rounded-full border border-gray-300 bg-white pr-4 pl-12 outline-none focus:ring-2 focus:ring-gray-300">
            <img class="absolute top-1/2 left-4 h-5 -translate-y-1/2" src="~/Images/find.svg" alt="Search">
        </div>

        <!-- Filter Icon with Text -->
        <div class="relative right-80 flex cursor-pointer items-center gap-2">
            <img src="~/Images/filter.svg" alt="Filter" class="h-5">
            <span class="font-medium text-black">Filters</span>
        </div>

        <!-- Add Facility Button -->
        <button id="addReq" class="flex items-center gap-2 rounded-full bg-[#04373A] px-6 py-2 text-white" onclick="openAdd()">
            <span class="text-xl">+</span>
            <span class="font-medium">New Submission</span>
        </button>
    </div>

    <table class="w-[88%] border-collapse rounded-lg bg-white text-left shadow-md">
            <tr class="text-gray-500">
                <th class="px-4 py-3">Id</th>
                <th class="px-4 py-3">User</th>
                <th class="px-4 py-3">Type</th>
                <th class="px-4 py-3">Request Submitted</th>
                <th class="px-4 py-3">Date</th>
                <th class="px-4 py-3">Closed</th>
                <th class="px-4 py-3">Assigned</th>
                <th class="px-4 py-3">Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in Model.ServiceRequests)
            {
                var user = Model.Users.FirstOrDefault(u => u.user_id == request.User_Id);
                var fullName = user != null ? $"{user.first_name} {user.last_name}" : "Unknown";
                var profileImage = $"data:image/jpeg;base64,{Convert.ToBase64String(user.profile_picture)}";

                <tr class="cursor-pointer border-b hover:bg-gray-100" data-request-id="@request.Request_Id">
                    <td>@request.Request_Id</td>
                    <td class="flex items-center gap-3 px-4 py-3">
                        <img id="user-img-@request.Request_Id" src="@profileImage" class="h-8 w-8 rounded-full" />
                        <span id="user-name-@request.Request_Id">@fullName</span>
                    </td>
                    <td class="px-4 py-3">@request.Request_Type</td>
                    <td class="px-4 py-3">@request.Request_Date.Date.ToShortDateString()</td>
                    <td class="px-4 py-3">@request.Request_Creation</td>
                    <td class="px-4 py-3">@request.Request_Closed</td>
                    <td class="px-4 py-3">@request.Assigned_Staff</td>
                    <td class="px-4 py-3 font-semibold text-yellow-500">@request.Request_Status</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Edit Modal (Hidden by default) -->
    <div id="modal" class="fixed inset-0 z-20 flex hidden items-center justify-center bg-black/50" onclick="closeModal(event)">
        <div class="w-[500px] rounded-2xl bg-white p-8" onclick="event.stopPropagation()">
            <h2 class="mb-4 text-center text-2xl font-extrabold text-gray-800">Service Request Details</h2>

            <div class="mb-4 flex items-center justify-center gap-2">
                <img id="user-img" src="~/Images/pfp.svg" class="h-10 w-10 rounded-full" />
                <span id="user-name" class="text-lg font-medium" id="edit-user">User</span>
            </div>

            <label class="mb-1 block text-base text-gray-500">Request Type</label>
            <select id="edit-type" class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500">
                <option>Maintenance</option>
                <option>Housekeeping</option>
                <option>Security</option>
            </select>

            <label class="mt-4 mb-1 block text-base text-gray-500">Subject</label>
            <input id="edit-subject" type="text" class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500" readonly />

            <div class="mt-4 mb-4 flex justify-between gap-4">
                <div class="w-1/2">
                    <label class="mb-1 block text-base text-gray-500">Date</label>
                    <input id="edit-date" type="date" class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500" />
                </div>
                <div class="w-1/2">
                    <label class="mb-1 block text-base text-gray-500">Time</label>
                    <input id="edit-time" type="time" class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500" />
                </div>
            </div>

            <label class="mb-1 block text-base text-gray-500">Description</label>
            <textarea id="edit-description" class="border-2 h-[10vh] w-full rounded-md border-gray-300 bg-white p-2 text-gray-500" readonly></textarea>

            <label class="mt-4 mb-1 block text-base text-gray-500">Attachments</label>
            <div id="attachment-container" class="mb-2"></div>

            <label class="mt-4 mb-1 block text-base text-gray-500">Assign Staff</label>
            <select id="assign-staff" class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500">
                <option>Assign Staff</option>
            </select>

            <div class="mt-6 flex gap-4">
                <button class="w-1/2 rounded-full border border-[#B25828] py-2 text-[#B25828]" onclick="closeModal(event)">Decline</button>
                <button id="approve-btn" class="w-1/2 rounded-full bg-[#003D38] py-2 text-white">Approve</button>

            </div>
        </div>
    </div>

    <!-- Request Modal (Hidden by default) -->
    <div id="ReqModal" class="fixed inset-0 z-20 flex hidden items-center justify-center bg-black/50" onclick="closeAdd(event)">
        <div class="w-[500px] rounded-2xl bg-white p-8" onclick="event.stopPropagation()">
            <h2 class="mb-4 text-center text-2xl font-extrabold text-gray-800">Add Request</h2>

            <!-- User Profile -->
            <div class="mb-4 flex items-center justify-center gap-2">
                <img src="~/Images/pfp.svg" class="h-10 w-10 rounded-full" />
                <span class="text-lg font-medium">Admin</span>
            </div>

            <!-- Request Type -->
            <label class="mb-1 block text-base text-gray-500">Request Type</label>
            <select class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500">
                <option>Maintenance</option>
                <option>Housekeeping</option>
                <option>Security</option>
            </select>

            <!-- Subject -->
            <label class="mt-4 mb-1 block text-base text-gray-500">Subject</label>
            <input type="text" value="Flickering Lights" class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500" readonly />

            <!-- Date and Time -->
            <div class="mt-4 mb-4 flex justify-between gap-4">
                <!-- Date Picker -->
                <div class="w-1/2">
                    <label class="mb-1 block text-base text-gray-500">Date</label>
                    <div class="relative">
                        <input type="date" value="2024-03-15" class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500" />
                    </div>
                </div>

                <!-- Time Picker -->
                <div class="w-1/2">
                    <label class="mb-1 block text-base text-gray-500">Time</label>
                    <div class="relative">
                        <input type="time" value="07:00" class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500" />
                    </div>
                </div>
            </div>

            <!-- Description -->
            <label class="mb-1 block text-base text-gray-500">Description</label>
            <textarea class="border-2 h-[10vh] w-full rounded-md border-gray-300 bg-white p-2 text-gray-500" readonly>Lights are not working.</textarea>

            <!-- Attachments -->
            <label class="mt-4 mb-1 block text-base text-gray-500">Attachments</label>
            <img src="~/Images/attachment.png" class="border-2 h-16 w-16 rounded-md border-gray-300 object-cover" />

            <!-- Assign Staff -->
            <label class="mt-4 mb-1 block text-base text-gray-500">Assign Staff</label>
            <select class="border-2 w-full rounded-md border-gray-300 bg-white p-2 text-gray-500">
                <option>Assign Staff!</option>
                <option>Bryl Darel Gorgonio</option>
            </select>

            <!-- Buttons -->
            <div class="mt-6 flex gap-4">
                <button class="w-1/2 rounded-full border border-[#B25828] py-2 text-[#B25828]" onclick="closeAdd(event)">Cancel</button>
                <button class="w-1/2 rounded-full bg-[#003D38] py-2 text-white">Submit</button>
            </div>
        </div>
    </div>


    @await Html.PartialAsync("_pagination")


    <div id="popup" class="fixed inset-0 z-20 mt-20 flex hidden items-center justify-center bg-gray-100">
        <div id="content" class="flex h-[90vh] w-[90%] rounded-lg bg-white shadow-lg">
        </div>
    </div>
    <script>
        @{
            var jsonSerializerOptions = new System.Text.Json.JsonSerializerOptions
            {
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase,
                WriteIndented = true
            };
        }

        let currentRequestId = null;

        const modelData = {
        serviceRequests: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ServiceRequests, jsonSerializerOptions))
        };
        console.log("Model data loaded:", modelData); // Debugging
        console.log("Service Requests:", modelData.serviceRequests); // Debugging

        const userModelData = {
        Users: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Users, jsonSerializerOptions))
        };
        console.log("Model data loaded:", userModelData); // Debugging
        console.log("Users:", userModelData.Users); // Debugging

        // Function to open the Edit-modal
           function openModal(requestId) {
            currentRequestId = requestId;
            console.log("Attempting to open modal for request ID:", requestId);

            const request = modelData.serviceRequests.find(r => r.request_Id === requestId);
            console.log(requestId);
            console.log(request.user_Id);

            const user = userModelData.Users.find(u => u.user_id === request.user_Id);
            console.log(user.user_id);
            console.log(user);

            if (!request) {
                console.error("Request not found for ID:", requestId);
                console.log("Available requests:", modelData.serviceRequests);
                return;
            }


            console.log(user.user_id);
            console.log(user.first_name);

           // document.getElementById('user-name').innerText = `${user.first_Name} ${user.last_Name}`;
           // document.getElementById('user-img').src = user.profile_picture || "~/Images/pfp.svg";

            console.log("Found request:", request);
            console.log(user.first_name);
            document.getElementById('user-name').innerText = user.first_name + ' ' + user.last_name;
            document.getElementById('user-img').src = `data:image/jpeg;base64,${user.profile_picture}`;

            //document.getElementById('edit-user').innerText = request.user_Id;
            document.getElementById('edit-type').value = request.request_Type;
            document.getElementById('edit-subject').value = request.request_Subject;

            const date = new Date(request.request_Date);
            document.getElementById('edit-date').value = date.toISOString().split('T')[0];
            document.getElementById('edit-time').value = request.request_Time || "";

            document.getElementById('edit-description').value = request.request_Description || "";

            // Clear and populate the staff dropdown based on request type
            const staffDropdown = document.getElementById('assign-staff');
            staffDropdown.innerHTML = '<option value="">Assign Staff</option>';

            let prefix = '';
            switch(request.request_Type) {
                case 'Security':
                    prefix = 'SCT-';
                    break;
                case 'Maintenance':
                    prefix = 'MTN-';
                    break;
                case 'Housekeeping':
                    prefix = 'HSK-';
                    break;
            }

            if (prefix) {
                const qualifiedStaff = filterUsersByPrefix(prefix);
                qualifiedStaff.forEach(staff => {
                    const option = document.createElement('option');
                    option.value = staff.user_id;
                    option.textContent = `${staff.first_name} ${staff.last_name}`;
                    staffDropdown.appendChild(option);
                });
            }

            // Set current assigned staff if exists
            if (request.assigned_Staff) {
                staffDropdown.value = request.assigned_Staff;
            }

            const attachmentContainer = document.getElementById('attachment-container');
            attachmentContainer.innerHTML = "";

            if (request.attachment_Path) {
                const img = document.createElement('img');
                img.src = request.attachment_Path;
                img.className = "border-2 h-25 w-50 rounded-md border-gray-300 object-cover";
                attachmentContainer.appendChild(img);
            }

            document.getElementById('modal').classList.remove('hidden');
        }

        function closeModal(event) {
            const modal = document.getElementById('modal');
            if (event.target === modal || event.type === 'click') {
                modal.classList.add('hidden');
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Modify your table rows to include onclick with request ID
            document.querySelectorAll('tbody tr').forEach(row => {
                const requestId = row.cells[0].textContent.trim();
                row.onclick = function (e) {
                    // Prevent clicking on nested elements from triggering
                    if (e.target.tagName === 'A' || e.target.tagName === 'BUTTON') return;
                    openModal(requestId);
                };

            });
        });
    </script>
    <script>

        function filterUsersByPrefix(prefix) {
            return userModelData.Users.filter(user =>
                user.user_id && user.user_id.startsWith(prefix)
            );
        }

        function openAdd() {
          document.getElementById('ReqModal').classList.remove('hidden');
        }

        function closeAdd(event) {
          const modal = document.getElementById('ReqModal');
          if (event.target === modal || event.type === 'click') {
            modal.classList.add('hidden');
          }
        }
    </script>
    <script>
        document.getElementById('approve-btn').addEventListener('click', function () {
            const request = modelData.serviceRequests.find(r => r.request_Id === currentRequestId);
            console.log(currentRequestId)
            // Gather updated fields
            const updatedRequest = {
                requestId: request.request_Id,
                requestType: document.getElementById('edit-type').value,
                requestDate: document.getElementById('edit-date').value,
                requestTime: document.getElementById('edit-time').value,
                assignedStaff: document.getElementById('assign-staff').value,

                requestStatus: "Approved"
            };

            console.log("Submitting update:", updatedRequest);

            fetch('/ServiceRequest/UpdateRequest', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedRequest)
            })
                .then(response => {
                    if (!response.ok) throw new Error('Network error');
                    return response.json();
                })
                .then(data => {
                    console.log("Server response:", data);
                    alert("Request updated successfully.");
                    location.reload(); // Optional: reload to reflect changes
                })
                .catch(error => {
                    console.error("Error updating request:", error);
                    alert("Failed to update request.");
                });
        });
    </script>

</div>