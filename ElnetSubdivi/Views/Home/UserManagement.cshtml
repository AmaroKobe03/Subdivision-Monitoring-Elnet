@model List<ElnetSubdivi.Models.Users>


@{
    ViewData["Title"] = "User Management";
}

<div class="flex h-[100vh] w-[90%] flex-col items-center overflow-auto overflow-y-hidden bg-[#f2f2f2] font-semibold">
    @await Html.PartialAsync("_sharedSearch")

    <div class="relative mb-6 flex w-[88%] items-center justify-between">
        <!-- Search Bar -->
        @await Html.PartialAsync("_sharedSearch2", "Add User")
    </div>

    <table class="bg-white-200 w-[88%] border-collapse bg-white text-left">
        <thead>
            <tr class="text-gray-500">
                <th class="px-4 py-3">Full Name</th>
                <th class="px-4 py-3">Address</th>
                <th class="px-4 py-3">Email</th>
                <th class="px-4 py-3">Phone Number</th>
                <th class="px-4 py-3">Role</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var user in Model)
                {
                    <tr onclick="viewUser('@user.user_id')">
                        <td class="gap-2 px-4 py-3">
                            <span>@user.first_name @user.middle_name @user.last_name</span>
                        </td>
                        <td class="px-4 py-3">@user.address</td>
                        <td class="px-4 py-3">@user.email</td>
                        <td class="px-4 py-3">@user.phone</td>
                        <td class="px-4 py-3 font-semibold">
                            @(user.type_of_user == 1 ? "Admin" : user.type_of_user == 2 ? "Homeowner" : user.type_of_user == 3 ? "Housekeeping" : user.type_of_user == 4 ? "Maintenance" : user.type_of_user == 5 ? "Security" : "Unknown")
                        </td>
                        <td class="justify-center relative left-5 flex cursor-pointer flex-row items-center gap-2 px-4 py-3 font-semibold text-teal-700">
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="text-center py-4 text-gray-500">No users found.</td>
                </tr>
            }
        </tbody>
    </table>
    @await Html.PartialAsync("_pagination")



    <!--Regiser User-->

    <div id="User-popup" class="fixed inset-0 z-100 flex hidden items-center justify-center bg-black/50 p-4">
        <div class="w-[600px] rounded-lg bg-white p-6 shadow-lg">
            <h1 class="text-center text-2xl font-semibold text-[#043137]">Register New User</h1>

            <!-- Registration Form -->
            <form id="registerForm">
                <div class="mt-4 space-y-3">
                    <!-- User Role -->
                    <div>
                        <label class="block text-sm font-medium">User Role</label>
                        <select id="regRole" name="type_of_user" class="w-full rounded border px-3 py-2 text-gray-600">
                            <option value="">Select User Type</option>
                            <option value="2">Homeowner</option>
                            <option value="3">Housekeeping</option>
                            <option value="4">Maintenance</option>
                            <option value="5">Security</option>
                        </select>
                    </div>

                    <!-- Name Fields -->
                    <div class="flex w-[95.8%] flex-row gap-2">
                        <div class="flex w-1/3 flex-col">
                            <label class="block text-sm font-medium">First Name</label>
                            <input id="regFirstName" name="first_name" type="text" class="rounded border px-3 py-2 text-gray-600" required />
                        </div>
                        <div class="flex w-1/3 flex-col">
                            <label class="block text-sm font-medium">Middle Name</label>
                            <input id="regMiddleName" name="middle_name" type="text" class="rounded border px-3 py-2 text-gray-600" />
                        </div>
                        <div class="flex w-1/3 flex-col">
                            <label class="block text-sm font-medium">Last Name</label>
                            <input id="regLastName" name="last_name" type="text" class="rounded border px-3 py-2 text-gray-600" required />
                        </div>
                    </div>

                    <!-- Date of Birth & Gender -->
                    <div class="flex gap-2">
                        <div class="w-1/2">
                            <label class="block text-sm font-medium">Date of Birth</label>
                            <input id="regDateofBirth" name="date_of_birth" type="date" class="w-full rounded border px-3 py-2 text-gray-600" required />
                        </div>
                        <div class="w-1/2">
                            <label class="block text-sm font-medium">Gender</label>
                            <select id="regGender" name="gender" class="w-full rounded border px-3 py-2 text-gray-600" required>
                                <option value="">Select Gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                            </select>
                        </div>
                    </div>

                    <!-- Email & Phone -->
                    <div class="flex gap-2">
                        <div class="w-1/2">
                            <label class="block text-sm font-medium">Email</label>
                            <input id="regEmail" name="email" type="email" class="w-1/2 rounded border px-3 py-2 text-gray-600" required />
                        </div>
                        <div class="w-1/2">
                            <label class="block text-sm font-medium">Phone Number</label>
                            <input id="regPhoneNumber" name="phone" type="text" class="w-1/2 rounded border px-3 py-2 text-gray-600" required />
                        </div>
                    </div>

                    <!-- Address -->
                    <div>
                        <label class="block text-sm font-medium">Address</label>
                        <input id="regAddress" name="address" type="text" class="w-full rounded border px-3 py-2 text-gray-600" required />
                    </div>
                </div>

                <!-- Buttons -->
                <div class="mt-6 flex justify-between">
                    <button id="cancelbtn" type="button" class="w-[45%] rounded-full border px-4 py-2 text-black">Cancel</button>
                    <button id="registerbtn" type="submit" class="w-[45%] rounded-full bg-[#043137] px-4 py-2 text-white">Register User</button>
                </div>
            </form>
        </div>
    </div>






    <!--View User-->
    <div id="view-user" class="fixed inset-0 z-20 flex hidden items-center justify-center bg-white pb-4">
        @await Html.PartialAsync("_sharedViewUser", new ElnetSubdivi.Models.Users())
    </div>





    <div id="moveout-user" class="bg-opacity-50 fixed inset-0 z-20 flex hidden items-center justify-center gap-4 bg-black/50 p-4">

        <div class="flex w-[20%] flex-col items-center justify-center gap-6 rounded-lg bg-white p-6 shadow-xl">
            <h1 class="text-3xl">Move Out User</h1>
            <h2 class="text-center">Are you sure you want to move out this owner? This action is irreversable.</h2>
            <div class="flex w-full gap-4">
                <button id="cancelMoveOut" class="w-1/2 rounded-full border px-6 py-2 text-black">Cancel</button>
                <button id="confirmMoveOut" class="w-1/2 rounded-full bg-[#043137] px-6 py-2 text-white">Confirm</button>
            </div>
        </div>

    </div>

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    const users = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));
</script>
<script>
    $(document).ready(function () {
        $("#registerForm").submit(function (e) {
            e.preventDefault(); // Prevent default form submission

            $.ajax({
                url: "/Users/Register", // Ensure this matches your UserController method
                type: "POST",
                data: $(this).serialize(),
                success: function (response) {
                    if (response.success) {
                        alert("User registered successfully!");
                        window.location.reload(); // Reload page or redirect if needed
                    } else {
                        alert("User registration failed.");
                    }
                },
                error: function () {
                    alert("Error processing request.");
                }
            });
        });

        // Close modal when cancel button is clicked
        $("#cancelbtn").click(function () {
            $("#User-popup").addClass("hidden");
        });
    });

        document.getElementById('cancelbtn').onclick = () => {
        document.getElementById('User-popup').classList.add('hidden');
    };
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            if (!modal) {
                console.error(`Modal ${modalId} not found.`);
                return;
            }
            modal.classList.remove("hidden");

            modal.addEventListener("click", (e) => {
                if (e.target === modal) {
                    closeModal(modalId);
                }
            });
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add("hidden");
            }
        }

        function getUserById(userId) {
            return users.find(u => u.user_id === userId);
        }

    window.viewUser = function (userId) {
        console.log(`Viewing user ${userId}`);
        const user = getUserById(userId);

        if (user) {
            const roles = {
                1: "Admin",
                2: "Homeowner",
                3: "Staff"
            };
            const role = roles[user.type_of_user] ?? "Unknown";

            console.log(`${user.first_name ?? ''} ${user.middle_name ?? ''} ${user.last_name ?? ''}`.trim());
            
            document.getElementById('viewUserId').value = user.user_id;
            document.getElementById("viewUserFullName").innerText = `${user.first_name ?? ''} ${user.middle_name ?? ''} ${user.last_name ?? ''}`.trim();
            document.getElementById("viewUserRole").innerText = role;
            document.getElementById("viewUserFirstName").value = user.first_name ?? '';
            document.getElementById("viewUserMiddleName").value = user.middle_name ?? '';
            document.getElementById("viewUserLastName").value = user.last_name ?? '';
            document.getElementById("viewUserDOB").value = user.date_of_birth ?? '';
            document.getElementById("viewUserGender").value = user.gender ?? '';
            document.getElementById("viewUserEmail").value = user.email ?? '';
            document.getElementById("viewUserPhone").value = user.phone ?? '';
            document.getElementById("viewUserAddress").value = user.address ?? '';

            const profilePic = document.getElementById('profilePic');
                if (profilePic) {
                    profilePic.src = `/User/ProfilePicture/${user.user_id}`;
            }
        }

        openModal("view-user");
    };

        function setupCloseButtons(modalId, closeBtnId, confirmBtnId = null) {
            const closeBtn = document.getElementById(closeBtnId);
            const confirmBtn = confirmBtnId ? document.getElementById(confirmBtnId) : null;

            if (closeBtn) {
                closeBtn.addEventListener("click", () => closeModal(modalId));
            }

            if (confirmBtn) {
                confirmBtn.addEventListener("click", () => {
                    closeModal(modalId);
                    console.log(`Confirmed action in ${modalId}`);
                });
            }
        }

        setupCloseButtons("view-user", "cancelView");
        setupCloseButtons("moveout-user", "cancelMoveOut", "confirmMoveOut");
    });
</script>
